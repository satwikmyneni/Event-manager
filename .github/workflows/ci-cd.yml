name: Project Drishti CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run setup check
      run: npm run setup
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

  test-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Streamlit app
      run: |
        python -c "import streamlit_app; print('✅ Streamlit app imports successfully')"
        python -c "import streamlit_components; print('✅ Components import successfully')"
        python -c "import streamlit_components2; print('✅ Additional components import successfully')"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security audit (Node.js)
      run: npm audit --audit-level moderate
    
    - name: Run security scan (Python)
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check -r requirements.txt

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install black flake8 isort
    
    - name: Lint JavaScript
      run: npx eslint . --ext .js --ignore-path .gitignore || true
    
    - name: Format Python code
      run: |
        black --check . || true
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        isort --check-only . || true

  build-and-deploy:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build application
      run: |
        echo "🏗️ Building Project Drishti..."
        npm run setup
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r . deployment/
        cd deployment
        rm -rf node_modules .git
        tar -czf ../project-drishti-deployment.tar.gz .
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: project-drishti-deployment
        path: project-drishti-deployment.tar.gz
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image (Backend)
      run: |
        docker build -t project-drishti-backend:latest -f Dockerfile.backend . || echo "Dockerfile.backend not found, skipping"
    
    - name: Build Docker image (Frontend)
      run: |
        docker build -t project-drishti-frontend:latest -f Dockerfile.frontend . || echo "Dockerfile.frontend not found, skipping"

  performance-test:
    needs: [test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start server for testing
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    
    - name: Run performance tests
      run: |
        curl -f http://localhost:3001/api/health || exit 1
        echo "✅ Health check passed"
        
        # Test response times
        time curl -s http://localhost:3001/api/dashboard > /dev/null
        echo "✅ Dashboard endpoint responsive"

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
